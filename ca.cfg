# OpenSSL CA conf

# vars from ENV
DNSNAME = $ENV::DNSNAME
CN      = $ENV::CN
UMAIL   = $ENV::UMAIL


# This definition stops the following lines choking if HOME isn't
# defined.
HOME                    = .

# Extra OBJECT IDENTIFIER info:
#oid_file               = $ENV::HOME/.oid
oid_section             = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions            = 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

IPSecOID=1.2.3.4.5.6.1

####################################################################
[ ca ]
default_days    = 365                   # how long to certify for
default_ca      = CA                    # The default ca section

####################################################################
[ CA ]
dir             = ./$ca::default_ca
certs           = $dir/certs            # Where the issued certs are kept
crl_dir         = $dir/crl              # Where the issued crl are kept
database        = $dir/index.txt        # database index file.
#unique_subject = no                    # Set to 'no' to allow creation of
                                        # several cetificates with same subject.
new_certs_dir   = $dir/newcerts         # default place for new certs.

certificate     = $dir/ca.crt    	# The CA certificate
serial          = $dir/serial           # The current serial number
crlnumber       = $dir/crlnumber        # the current crl number
                                        # must be commented out to leave a V1 CRL
crl             = $crl_dir/crl.pem      # The current CRL
private_key     = $dir/private/ca.pem   # The private key!

x509_extensions = usr_cert              # The extentions to add to the cert


name_opt        = ca_default            # Subject Name options
cert_opt        = ca_default            # Certificate field options

crl_extensions  = crl_ext		# enable V2 CRL lists

default_days    = $ca::default_days
default_crl_days= 365                   # how long before next CRL
default_md      = sha512                # which md to use.
preserve        = no                    # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy          = policy_match


####################################################################
# For the CA policy
[ policy_match ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

####################################################################
[ req ]
days                    = $ca::default_days
default_bits            = 2048
default_keyfile         = privkey.pem
distinguished_name      = req_distinguished_name
attributes              = req_attributes
x509_extensions 	= v3_ca # The extentions to add to the self signed cert

string_mask 		= nombstr

req_extensions		= v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName                     = DE
countryName_default             = DE
countryName_min                 = 2
countryName_max                 = 2

stateOrProvinceName             = Berlin
stateOrProvinceName_default     = Berlin

localityName                    = Berlin
localityName_default            = Berlin

0.organizationName              = zero-sys.net
0.organizationName_default      = zero-sys.net

organizationalUnitName          = IT
#organizationalUnitName_default =

commonName                      = $CN
commonName_default		= $CN
#commonName_max                  = 64

emailAddress                    = $UMAIL
emailAddress_default		= $UMAIL
emailAddress_max                = 64

# SET-ex3                       = SET extension number 3

[ req_attributes ]
#challengePassword              = A challenge password
#challengePassword_min          = 4
#challengePassword_max          = 20

#unstructuredName               = An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=critical,CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType                    = server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment                       = "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

nsCaRevocationUrl               = http://crl.ca.zero-sys.net/crl.pem
crlDistributionPoints		= URI:http://crl.ca.zero-sys.net/crl.pem
authorityInfoAccess             = OCSP;URI:http://ocsp.ca.zero-sys.net:8081  # OCSP server


[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = critical,CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

subjectAltName          = $DNSNAME

extendedKeyUsage	= serverAuth, clientAuth

crlDistributionPoints		= URI:http://crl.ca.zero-sys.net/crl.pem
authorityInfoAccess             = OCSP;URI:http://ocsp.ca.zero-sys.net:8081  # OCSP server

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer:always

basicConstraints = critical,CA:true

keyUsage = critical, cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

nsCaRevocationUrl               = http://crl.ca.zero-sys.net/crl.pem
crlDistributionPoints		= URI:http://crl.ca.zero-sys.net/crl.pem
authorityInfoAccess             = OCSP;URI:http://ocsp.ca.zero-sys.net:8081  # OCSP server


[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always

nsCaRevocationUrl               = http://crl.ca.zero-sys.net/crl.pem


[ v3_OCSP ]

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = OCSPSigning

